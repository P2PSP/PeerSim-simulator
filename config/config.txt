# parameters of periodic execution
# CYCLES * CYCLE = how many milliseconds the experiment would take
# Note that the source stops issuing transactions 25 seconds before the end,
# to let everything propagate fully.
CYCLES 600
CYCLE 100 # milliseconds

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 5
MAXDELAY 100
# drop is a probability, 0<=DROP<=1
DROP 0

random.seed 9098797865656766578567
network.size 15000
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE * 50
simulation.experiments 1

################### protocols ===========================
protocol.0 peersim.core.IdleProtocol
protocol.0.step CYCLE

protocol.1 txrelaysim.src.Source
protocol.1.linkable 0
protocol.1.step 1000 # trigger every seconds to handle tps easier
protocol.1.transport tr

protocol.2 txrelaysim.src.Peer
protocol.2.linkable 0
protocol.2.step CYCLE
protocol.2.transport tr

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

################### initialization ======================
init.1 txrelaysim.src.SourceInitializer
init.1.protocol 1
init.1.tps 7

init.2 txrelaysim.src.PeerInitializer
init.2.protocol 2
init.2.out_peers_legacy 8
init.2.out_peers_recon 8
init.2.reachable_count 1500
# Delays applied by legacy nodes when relaying transactions (to inbounds and outbounds)
init.2.in_flood_delay_legacy_peer 5000
init.2.out_flood_delay_legacy_peer 2000
# Delays applied by reconciling nodes when relaying transactions (to inbounds and outbounds)
init.2.in_flood_delay_recon_peer 4000
init.2.out_flood_delay_recon_peer 1500
init.2.reconcile_percent 50
init.2.reconciliation_interval 8000
init.2.in_flood_peers_percent 10
init.2.out_flood_peers_percent 10
init.2.default_q 0.25
init.2.private_black_holes_percent = 0

init.sch1 CDScheduler
init.sch1.protocol 1
init.sch1.randstart

init.sch2 CDScheduler
init.sch2.protocol 2
init.sch2.randstart

################ control ==============================

control.0 txrelaysim.src.InvObserver
control.0.protocol 2
control.0.step CYCLE * 100

